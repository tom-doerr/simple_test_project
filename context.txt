<<<<<<< HEAD
=============2025-03-18 11:12:02===================
=======
=============2025-03-18 11:07:19===================
>>>>>>> task/train_a_logistic_regression_model_on_mnist_20250318_110719

/home/tom/.pyenv/versions/3.11.10/lib/python3.11/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0
testmon: changed files: 0, unchanged files: 1, environment: default
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
<<<<<<< HEAD
rootdir: /home/tom/worktrees/simple_test_project/create_a_textualize_demo_interface_and_document_it_20250318_110131
=======
rootdir: /home/tom/worktrees/simple_test_project/train_a_logistic_regression_model_on_mnist_20250318_110719
>>>>>>> task/train_a_logistic_regression_model_on_mnist_20250318_110719
plugins: mock-3.14.0, asyncio-0.24.0, testmon-2.1.3, anyio-4.9.0, timeout-2.3.1, repeat-0.9.3, xdist-3.6.1, cov-6.0.0, flake8-1.3.0, hypothesis-6.121.2, random-order-1.1.1, pylint-0.21.0
asyncio: mode=Mode.STRICT, default_loop_scope=None
timeout: 10.0s
timeout method: signal
timeout func_only: False
<<<<<<< HEAD
collected 13 items

tests/test_show_time.py ssssssssssFss                                    [100%]

=================================== FAILURES ===================================
__________________________ test_show_time_no_textual ___________________________

    def test_show_time_no_textual():
        """Test that show_time.py runs without errors when textual is not installed."""
>       result = subprocess.run(
            ["python", "show_time.py"], capture_output=True, text=True, check=True
        )

tests/test_show_time.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

input = None, capture_output = True, timeout = None, check = True
popenargs = (['python', 'show_time.py'],)
kwargs = {'stderr': -1, 'stdout': -1, 'text': True}
process = <Popen: returncode: 1 args: ['python', 'show_time.py']>
stdout = 'Textual is not installed. Please install it to run the Textual interface.\n'
stderr = '', retcode = 1

    def run(*popenargs,
            input=None, capture_output=False, timeout=None, check=False, **kwargs):
        """Run command with arguments and return a CompletedProcess instance.
    
        The returned instance will have attributes args, returncode, stdout and
        stderr. By default, stdout and stderr are not captured, and those attributes
        will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them,
        or pass capture_output=True to capture both.
    
        If check is True and the exit code was non-zero, it raises a
        CalledProcessError. The CalledProcessError object will have the return code
        in the returncode attribute, and output & stderr attributes if those streams
        were captured.
    
        If timeout is given, and the process takes too long, a TimeoutExpired
        exception will be raised.
    
        There is an optional argument "input", allowing you to
        pass bytes or a string to the subprocess's stdin.  If you use this argument
        you may not also use the Popen constructor's "stdin" argument, as
        it will be used internally.
    
        By default, all communication is in bytes, and therefore any "input" should
        be bytes, and the stdout and stderr will be bytes. If in text mode, any
        "input" should be a string, and stdout and stderr will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode is
        triggered by setting any of text, encoding, errors or universal_newlines.
    
        The other arguments are the same as for the Popen constructor.
        """
        if input is not None:
            if kwargs.get('stdin') is not None:
                raise ValueError('stdin and input arguments may not both be used.')
            kwargs['stdin'] = PIPE
    
        if capture_output:
            if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
                raise ValueError('stdout and stderr arguments may not be used '
                                 'with capture_output.')
            kwargs['stdout'] = PIPE
            kwargs['stderr'] = PIPE
    
        with Popen(*popenargs, **kwargs) as process:
            try:
                stdout, stderr = process.communicate(input, timeout=timeout)
            except TimeoutExpired as exc:
                process.kill()
                if _mswindows:
                    # Windows accumulates the output in a single blocking
                    # read() call run on child threads, with the timeout
                    # being done in a join() on those threads.  communicate()
                    # _after_ kill() is required to collect that and add it
                    # to the exception.
                    exc.stdout, exc.stderr = process.communicate()
                else:
                    # POSIX _communicate already populated the output so
                    # far into the TimeoutExpired exception.
                    process.wait()
                raise
            except:  # Including KeyboardInterrupt, communicate handled that.
                process.kill()
                # We don't call process.wait() as .__exit__ does that for us.
                raise
            retcode = process.poll()
            if check and retcode:
>               raise CalledProcessError(retcode, process.args,
                                         output=stdout, stderr=stderr)
E               subprocess.CalledProcessError: Command '['python', 'show_time.py']' returned non-zero exit status 1.

../../../.pyenv/versions/3.11.10/lib/python3.11/subprocess.py:571: CalledProcessError
=========================== short test summary info ============================
FAILED tests/test_show_time.py::test_show_time_no_textual - subprocess.Called...
======================== 1 failed, 12 skipped in 0.58s =========================
=======
collected 2 items / 2 deselected / 0 selected

============================ 2 deselected in 0.15s =============================
>>>>>>> task/train_a_logistic_regression_model_on_mnist_20250318_110719





=====================================================================
<<<<<<< HEAD
--------------------------------------------------------------------
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)
=======
************* Module test_show_time
tests/test_show_time.py:4:0: W0611: Unused import datetime (unused-import)

-------------------------------------------------------------------
Your code has been rated at 9.68/10 (previous run: 10.00/10, -0.32)
>>>>>>> task/train_a_logistic_regression_model_on_mnist_20250318_110719

Focus on code that causes this test to fail: 

Focus on fixing the linting issues


# Test files content:

# test_show_time.py
"""Tests for show_time.py."""

import datetime
import subprocess
import pytest
import requests

try:
    from textual.testing import AppTester
    from show_time import CryptoApp, CryptoDisplay

    TEXTUAL_INSTALLED = True
except ImportError as e:
    print(f"Failed to import required modules: {e}. Ensure textual is installed.")
    AppTester = None
    CryptoApp = None
    CryptoDisplay = None
    TEXTUAL_INSTALLED = False


@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_show_time():
    """Test that show_time.py runs without errors."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=True
    )
    assert result.returncode == 0


@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_show_time_output():
    """Test that show_time.py produces output and contains expected data."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=True
    )
    assert len(result.stdout) > 0
    assert "Ethereum" in result.stdout
    assert "$" in result.stdout


@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_textual_app_runs():
    """Test that the Textual app runs without errors."""
    try:
        result = subprocess.run(
            ["python", "show_time.py", "--textual"],
            capture_output=True,
            text=True,
            check=True,
        )
        assert result.returncode == 0
    except FileNotFoundError:
        pytest.fail("show_time.py not found. Ensure it is in the same directory.")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_render():
    """Test that CryptoDisplay renders correctly."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        assert app.content != ""
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_initial_render():
    """Test that CryptoDisplay renders initial content correctly."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert "Loading..." in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_price_displayed():
    """Test that CryptoDisplay displays the Ethereum price."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()  # Wait for the price to load
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_displays_time():
    """Test that CryptoApp displays the current time in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert datetime.datetime.now().strftime("%Y-%m-%d") in str(
            crypto_display.render()
        )
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
async def test_crypto_app_displays_data():
    """Test that CryptoApp displays data in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_handles_api_error(mocker):
    """Test that CryptoDisplay handles API request errors gracefully."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    # Mock the requests.get method to simulate an API error
    mocker.patch(
        "requests.get",
        side_effect=requests.exceptions.RequestException("Simulated API error"),
    )

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()
        assert "Error fetching data" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()
        assert "Ethereum" in str(crypto_display.render())
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_runs():
    """Test that CryptoApp can be initialized and run without errors."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = CryptoApp()
        await app.process_messages()  # Process initial messages
        assert True  # If it gets here without an exception, it's considered a pass
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"CryptoApp failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_displays_eth_price():
    """Test that CryptoApp displays the Ethereum price in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"CryptoApp failed to run: {e}")


def test_textual_installed():
    """Test that textual is installed. If not, skip textual tests."""
    if not TEXTUAL_INSTALLED:
        pytest.skip("textual is not installed")


def test_show_time_no_textual():
    """Test that show_time.py runs without errors when textual is not installed."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=True
    )
    assert result.returncode == 1
    assert "Textual is not installed" in result.stdout
