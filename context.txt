=============2025-03-18 14:52:05===================

/home/tom/.pyenv/versions/3.11.10/lib/python3.11/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.4, pluggy-1.5.0
testmon: The packages installed in your Python environment have been changed. All tests have to be re-executed. environment: default
Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>
rootdir: /home/tom/worktrees/simple_test_project/fix_the_test_20250318_145205930
plugins: mock-3.14.0, asyncio-0.24.0, testmon-2.1.3, anyio-4.9.0, timeout-2.3.1, repeat-0.9.3, xdist-3.6.1, cov-6.0.0, flake8-1.3.0, hypothesis-6.121.2, random-order-1.1.1, pylint-0.21.0
asyncio: mode=Mode.STRICT, default_loop_scope=None
timeout: 10.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
___________________ ERROR collecting tests/test_show_time.py ___________________
tests/test_show_time.py:5: in <module>
    @pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
E   NameError: name 'pytest' is not defined
=========================== short test summary info ============================
ERROR tests/test_show_time.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.40s ===============================





=====================================================================
************* Module test_show_time
tests/test_show_time.py:5:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:5:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:14:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:14:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:25:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:25:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:37:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:40:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:41:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:41:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:44:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:45:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:48:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:48:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:51:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:52:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:55:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:56:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:56:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:59:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:59:28: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:60:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:63:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:63:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:65:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:67:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:68:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:71:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:72:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:72:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:75:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:75:28: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:76:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:79:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:79:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:81:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:84:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:85:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:88:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:89:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:89:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:90:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:91:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:91:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:94:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:95:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:98:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:98:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:100:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:101:15: E0602: Undefined variable 'datetime' (undefined-variable)
tests/test_show_time.py:104:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:105:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:108:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:111:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:112:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:115:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:116:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:116:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:119:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:119:28: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:120:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:125:20: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:129:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:129:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:131:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:134:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:135:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:138:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:138:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:140:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:144:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:145:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:148:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:149:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:149:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:152:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:153:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:156:14: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:159:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:160:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:163:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:164:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:164:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:165:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:166:1: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:166:24: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:169:7: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:170:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:173:14: E0602: Undefined variable 'AppTester' (undefined-variable)
tests/test_show_time.py:173:28: E0602: Undefined variable 'CryptoApp' (undefined-variable)
tests/test_show_time.py:175:43: E0602: Undefined variable 'CryptoDisplay' (undefined-variable)
tests/test_show_time.py:177:12: E0602: Undefined variable 'requests' (undefined-variable)
tests/test_show_time.py:178:8: E0602: Undefined variable 'pytest' (undefined-variable)
tests/test_show_time.py:183:11: E0602: Undefined variable 'TEXTUAL_INSTALLED' (undefined-variable)
tests/test_show_time.py:184:8: E0602: Undefined variable 'pytest' (undefined-variable)

--------------------------------------------------------------------
Your code has been rated at 0.00/10 (previous run: 10.00/10, -10.00)

Focus on code that causes this test to fail: 
___________________ ERROR collecting tests/test_show_time.py ___________________

Focus on fixing the linting issues


# Test files content:

# test_show_time.py
"""Tests for show_time.py."""

import subprocess

@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_show_time():
    """Test that show_time.py runs without errors."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=True
    )
    assert result.returncode == 0


@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_show_time_output():
    """Test that show_time.py produces output and contains expected data."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=True
    )
    assert len(result.stdout) > 0
    assert "Ethereum" in result.stdout
    assert "$" in result.stdout


@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
def test_textual_app_runs():
    """Test that the Textual app runs without errors."""
    try:
        result = subprocess.run(
            ["python", "show_time.py", "--textual"],
            capture_output=True,
            text=True,
            check=True,
        )
        assert result.returncode == 0
    except FileNotFoundError:
        pytest.fail("show_time.py not found. Ensure it is in the same directory.")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_render():
    """Test that CryptoDisplay renders correctly."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        assert app.content != ""
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_initial_render():
    """Test that CryptoDisplay renders initial content correctly."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert "Loading..." in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_price_displayed():
    """Test that CryptoDisplay displays the Ethereum price."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()  # Wait for the price to load
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_displays_time():
    """Test that CryptoApp displays the current time in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert datetime.datetime.now().strftime("%Y-%m-%d") in str(
            crypto_display.render()
        )
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
async def test_crypto_app_displays_data():
    """Test that CryptoApp displays data in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_display_handles_api_error(mocker):
    """Test that CryptoDisplay handles API request errors gracefully."""
    if CryptoApp is None or CryptoDisplay is None:
        pytest.skip("CryptoApp or CryptoDisplay could not be imported.")

    # Mock the requests.get method to simulate an API error
    mocker.patch(
        "requests.get",
        side_effect=requests.exceptions.RequestException("Simulated API error"),
    )

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()
        assert "Error fetching data" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        await crypto_display.update_price()
        assert "Ethereum" in str(crypto_display.render())
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"App failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_runs():
    """Test that CryptoApp can be initialized and run without errors."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = CryptoApp()
        await app.process_messages()  # Process initial messages
        assert True  # If it gets here without an exception, it's considered a pass
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"CryptoApp failed to run: {e}")


@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
@pytest.mark.asyncio
@pytest.mark.skipif(not TEXTUAL_INSTALLED, reason="textual is not installed")
async def test_crypto_app_displays_eth_price():
    """Test that CryptoApp displays the Ethereum price in the Textual interface."""
    if CryptoApp is None:
        pytest.skip("CryptoApp could not be imported.")

    try:
        app = AppTester(app=CryptoApp())
        await app.boot_app()
        crypto_display = app.app.query_one(CryptoDisplay)
        assert "$" in str(crypto_display.render())
    except (requests.exceptions.RequestException, AssertionError) as e:
        pytest.fail(f"CryptoApp failed to run: {e}")


def test_textual_installed():
    """Test that textual is installed. If not, skip textual tests."""
    if not TEXTUAL_INSTALLED:
        pytest.skip("textual is not installed")


def test_show_time_no_textual():
    """Test that show_time.py runs without errors when textual is not installed."""
    result = subprocess.run(
        ["python", "show_time.py"], capture_output=True, text=True, check=False
    )
    assert result.returncode == 1
    assert "Textual is not installed" in result.stdout
